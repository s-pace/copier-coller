type User {
  id: ID
  username: String!
  password: String!
  email: String!
  profileInfo: String!
  role: RoleEnum!
  credit: CreditTypeEnum!
  loyaltyStatus: LoyaltyStatusEnum!
  lastLogin: DateTime!
  socialMediaLinks: [String!]!
  stripeId: ID
  referrerId: ID
}

enum RoleEnum {
  Admin
  User
  Guest
}

enum CreditTypeEnum {
  Jam
  Fiat
}

enum LoyaltyStatusEnum {
  Bronze
  Silver
  Gold
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type Order {
  id: ID
  customerId: ID!
  model3DId: ID!
  orderDate: DateTime!
  orderStatus: OrderStatusEnum!
}

enum OrderStatusEnum {
  Waiting
  Printing
  Shipped
  Submitted
}

type GPSCoordinate {
  latitude: Float!
  longitude: Float!
}

type Printer {
  id: ID
  quantity: Float!
  location: GPSCoordinate!
  availabilitySchedule: DateTime!
  printedCount: Float!
  rateIncome: Float!
}

type Filament {
  id: ID
  filamentType: FilamentTypeEnum!
  commonlyPrintedMaterials: String!
  extrusionTemperature: Float!
  bedTemperature: Float!
  postPrintAppearance: String!
  commonProperties: String!
}

enum FilamentTypeEnum {
  Pla
  Abs
  Petg
}

type ModelCreator {
  id: ID
  creationsPortfolio: String!
  verificationStatus: VerificationStatusEnum!
}

enum VerificationStatusEnum {
  Verified
  Pending
  UnVerified
}

type Team {
  id: ID
  teamName: String!
  memberIds: [ID!]!
}

type Model3D {
  id: ID!
  creatorId: ID!
  category: String!
  description: String!
  path: String!
  license: String!
  price: Float!
  status: Model3DStatusEnum!
  preSignedUrl: String
}

enum Model3DStatusEnum {
  Active
  Inactive
  PendingValidation
}

type Reaction {
  id: ID!
  memberId: ID!
  modelId: ID!
  createdAt: DateTime!
  deletedAt: DateTime!
  type: ReactionTypeEnum!
}

enum ReactionTypeEnum {
  LIKE
  DISLIKE
  FAVORITE
  CRUSH
  FOLLOW
}

type Query {
  getModelCreatorById(id: String!): ModelCreator!
  getTeamById(id: String!): Team!
  getUserById(id: String!): User!
  getOrderById(id: String!): Order!
  getPrinterById(id: String!): Printer!
  getFilamentById(id: String!): Filament!
  getModel3DById(id: String!): Model3D!
  listModel3D: [Model3D!]!
  getReactionById(id: String!): Reaction!
}

type Mutation {
  createModelCreator(data: ModelCreatorInput!): ModelCreator!
  updateModelCreator(id: ID!, data: ModelCreatorInput!): ModelCreator!
  deleteModelCreator(id: String!): Boolean!
  createTeam(data: TeamInput!): Team!
  updateTeam(id: ID!, data: TeamInput!): Team!
  deleteTeam(id: String!): Boolean!
  createUser(data: UserInput!): User!
  updateUser(id: ID!, data: UserInput!): User!
  deleteUser(id: String!): Boolean!
  createOrder(data: OrderInput!): Order!
  updateOrder(id: ID!, data: OrderInput!): Order!
  deleteOrder(id: String!): Boolean!
  createPrinter(data: PrinterInput!): Printer!
  updatePrinter(id: ID!, data: PrinterInput!): Printer!
  deletePrinter(id: String!): Boolean!
  createFilament(data: FilamentInput!): Filament!
  updateFilament(id: ID!, data: FilamentInput!): Filament!
  deleteFilament(id: String!): Boolean!
  createModel3D(data: Model3DInput!): Model3D!
  updateModel3D(id: ID!, data: Model3DInput!): Model3D!
  deleteModel3D(id: String!): Boolean!
  createReaction(data: ReactionInput!): Reaction!
  updateReaction(id: ID!, data: ReactionInput!): Reaction!
  deleteReaction(id: String!): Boolean!
}

input ModelCreatorInput {
  creationsPortfolio: String!
  verificationStatus: VerificationStatusEnum!
}

input TeamInput {
  teamName: String!
  memberIds: [ID!]!
}

input UserInput {
  username: String!
  password: String!
  email: String!
  profileInfo: String!
  role: RoleEnum!
  credit: CreditTypeEnum!
  loyaltyStatus: LoyaltyStatusEnum!
  socialMediaLinks: [String!]!
  stripeId: ID!
  referrerId: ID!
}

input OrderInput {
  customerId: ID!
  model3DId: ID!
  orderDate: DateTime!
  orderStatus: OrderStatusEnum!
}

input PrinterInput {
  quantity: Float!
  location: GPSCoordinateInput!
  availabilitySchedule: DateTime!
  printedCount: Float!
  rateIncome: Float!
}

input GPSCoordinateInput {
  latitude: Float!
  longitude: Float!
}

input FilamentInput {
  filamentType: FilamentTypeEnum!
  commonlyPrintedMaterials: String!
  extrusionTemperature: Float!
  bedTemperature: Float!
  postPrintAppearance: String!
  commonProperties: String!
}

input Model3DInput {
  id: String
  creatorId: ID!
  category: String!
  description: String!
  path: String!
  license: String!
  price: Float!
  status: Model3DStatusEnum!
}

input ReactionInput {
  id: ID
  memberId: ID!
  modelId: ID!
  createdAt: DateTime!
  deletedAt: DateTime!
  type: ReactionTypeEnum!
}
